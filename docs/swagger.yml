openapi: 3.0.0
info:
  title: Acamae API
  version: 2.0.0
  description: |
    API for the Acamae application with consistent response structure.

    **Response Structure:**
    - All responses follow the same pattern
    - Include timestamp and requestId for traceability
    - Messages in English
    - Specific semantic codes

components:
  schemas:
    # ===== RESPONSE SCHEMAS =====
    ApiSuccessResponse:
      type: object
      required:
        - success
        - data
        - status
        - code
        - message
        - timestamp
        - requestId
      properties:
        success:
          type: boolean
          example: true
          description: Indicates if the operation was successful
        data:
          description: Response data (can be null, object, array)
        status:
          type: integer
          example: 200
          description: HTTP status code
        code:
          type: string
          example: "SUCCESS"
          description: Semantic application code
        message:
          type: string
          example: "Operation successful"
          description: Descriptive message in English
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00.000Z"
          description: ISO 8601 timestamp of the response
        requestId:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
          description: Unique request ID for traceability
        meta:
          type: object
          description: Additional metadata (pagination, totals, etc.)

    ApiErrorResponse:
      type: object
      required:
        - success
        - data
        - status
        - code
        - message
        - timestamp
        - requestId
      properties:
        success:
          type: boolean
          example: false
          description: Indicates if the operation was successful
        data:
          type: null
          example: null
          description: Always null in errors
        status:
          type: integer
          example: 400
          description: HTTP status code
        code:
          type: string
          example: "AUTH_INVALID_CREDENTIALS"
          description: Semantic error code
        message:
          type: string
          example: "The provided credentials are incorrect"
          description: Error message in English
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00.000Z"
          description: ISO 8601 timestamp of the response
        requestId:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
          description: Unique request ID for traceability
        meta:
          type: object
          description: Additional metadata
        error:
          type: object
          description: Specific error details
          properties:
            type:
              type: string
              enum: [validation, network, server, authentication, authorization, business]
              example: "authentication"
              description: Error type
            details:
              type: array
              description: Field-specific errors
              items:
                type: object
                properties:
                  field:
                    type: string
                    example: "password"
                    description: Field that caused the error
                  code:
                    type: string
                    example: "INVALID"
                    description: Field-specific code
                  message:
                    type: string
                    example: "The password is not valid"
                    description: Specific message in English
            stack:
              type: string
              description: Stack trace (development only)

    # ===== ENTITIES =====
    User:
      type: object
      properties:
        id:
          type: string
          example: "user_123456"
        email:
          type: string
          format: email
          example: "user@example.com"
        username:
          type: string
          example: "user123"
        role:
          type: string
          enum: [user, admin]
          example: "user"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00.000Z"

    UserWithTokens:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        accessToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refreshToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    # ===== PAYLOADS =====
    LoginPayload:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          example: "Password123!"

    RegisterPayload:
      type: object
      required:
        - email
        - password
        - username
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          example: "Password123!"
        username:
          type: string
          example: "user123"

    ForgotPasswordPayload:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"

    ResetPasswordPayload:
      type: object
      required:
        - password
      properties:
        password:
          type: string
          format: password
          example: "NewPassword123!"

    ResendVerificationPayload:
      type: object
      required:
        - identifier
      properties:
        identifier:
          type: string
          example: "user@example.com"
          description: User's email

paths:
  # ===== AUTHENTICATION =====
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login
      description: Authenticate user with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginPayload'
            examples:
              valid_login:
                summary: Valid login
                value:
                  email: "user@example.com"
                  password: "Password123!"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserWithTokens'
              examples:
                login_success:
                  summary: Login successful
                  value:
                    success: true
                    data:
                      user:
                        id: "user_123456"
                        email: "user@example.com"
                        username: "user123"
                        role: "user"
                        createdAt: "2024-01-15T10:30:00.000Z"
                        updatedAt: "2024-01-15T10:30:00.000Z"
                      accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      refreshToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    status: 200
                    code: "SUCCESS"
                    message: "Login successful"
                    timestamp: "2024-01-15T10:30:00.000Z"
                    requestId: "550e8400-e29b-41d4-a716-446655440000"
        '401':
          description: Incorrect credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
              examples:
                invalid_credentials:
                  summary: Incorrect credentials
                  value:
                    success: false
                    data: null
                    status: 401
                    code: "AUTH_INVALID_CREDENTIALS"
                    message: "The provided credentials are incorrect"
                    timestamp: "2024-01-15T10:30:00.000Z"
                    requestId: "550e8400-e29b-41d4-a716-446655440000"
                    error:
                      type: "authentication"
                      details:
                        - field: "credentials"
                          code: "INVALID"
                          message: "Incorrect email or password"
        '422':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
              examples:
                VALIDATION_ERROR:
                  summary: Validation failed
                  value:
                    success: false
                    data: null
                    status: 422
                    code: "VALIDATION_ERROR"
                    message: "The submitted data is not valid"
                    timestamp: "2024-01-15T10:30:00.000Z"
                    requestId: "550e8400-e29b-41d4-a716-446655440000"
                    error:
                      type: "validation"
                      details:
                        - field: "email"
                          code: "INVALID_FORMAT"
                          message: "The email format is not valid"
                        - field: "password"
                          code: "REQUIRED"
                          message: "Password is required"
        '429':
          description: Too many attempts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
              examples:
                rate_limit:
                  summary: Rate limit exceeded
                  value:
                    success: false
                    data: null
                    status: 429
                    code: "AUTH_RATE_LIMIT"
                    message: "Too many login attempts. Try again in 15 minutes"
                    timestamp: "2024-01-15T10:30:00.000Z"
                    requestId: "550e8400-e29b-41d4-a716-446655440000"

  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      description: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterPayload'
            examples:
              valid_registration:
                summary: Valid registration
                value:
                  email: "newuser@example.com"
                  username: "newuser"
                  password: "Password123!"
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: null
              examples:
                register_success:
                  summary: Registration successful
                  value:
                    success: true
                    data: null
                    status: 201
                    code: "SUCCESS"
                    message: "User registered successfully. Check your email to verify your account."
                    timestamp: "2024-01-15T10:30:00.000Z"
                    requestId: "550e8400-e29b-41d4-a716-446655440000"
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
              examples:
                user_exists:
                  summary: User already exists
                  value:
                    success: false
                    data: null
                    status: 409
                    code: "AUTH_USER_ALREADY_EXISTS"
                    message: "Email is already registered"
                    timestamp: "2024-01-15T10:30:00.000Z"
                    requestId: "550e8400-e29b-41d4-a716-446655440000"
                    error:
                      type: "business"
                      details:
                        - field: "email"
                          code: "DUPLICATE"
                          message: "This email is already in use"

  /auth/verify-email/{token}:
    post:
      tags:
        - Authentication
      summary: Verify email
      description: Verify user account using a token
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: null
              examples:
                verify_success:
                  summary: Verification successful
                  value:
                    success: true
                    data: null
                    status: 200
                    code: "SUCCESS"
                    message: "Email verified successfully"
                    timestamp: "2024-01-15T10:30:00.000Z"
                    requestId: "550e8400-e29b-41d4-a716-446655440000"
        '400':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
              examples:
                token_expired:
                  summary: Token expired
                  value:
                    success: false
                    data: null
                    status: 400
                    code: "AUTH_TOKEN_EXPIRED"
                    message: "The verification link has expired"
                    timestamp: "2024-01-15T10:30:00.000Z"
                    requestId: "550e8400-e29b-41d4-a716-446655440000"
                    error:
                      type: "authentication"
                      details:
                        - field: "token"
                          code: "EXPIRED"
                          message: "The token has expired"
                token_invalid:
                  summary: Token invalid
                  value:
                    success: false
                    data: null
                    status: 400
                    code: "AUTH_TOKEN_INVALID"
                    message: "The verification link is not valid"
                    timestamp: "2024-01-15T10:30:00.000Z"
                    requestId: "550e8400-e29b-41d4-a716-446655440000"
                token_already_used:
                  summary: Token already used
                  value:
                    success: false
                    data: null
                    status: 400
                    code: "AUTH_TOKEN_ALREADY_USED"
                    message: "This link has already been used"
                    timestamp: "2024-01-15T10:30:00.000Z"
                    requestId: "550e8400-e29b-41d4-a716-446655440000"

  /auth/resend-verification:
    post:
      tags:
        - Authentication
      summary: Resend verification email
      description: Send new verification email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendVerificationPayload'
      responses:
        '200':
          description: Verification email resent
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: null
              examples:
                resend_success:
                  summary: Resend successful
                  value:
                    success: true
                    data: null
                    status: 200
                    code: "SUCCESS"
                    message: "New link sent. Check your inbox."
                    timestamp: "2024-01-15T10:30:00.000Z"
                    requestId: "550e8400-e29b-41d4-a716-446655440000"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
              examples:
                user_not_found:
                  summary: User not found
                  value:
                    success: false
                    data: null
                    status: 404
                    code: "AUTH_USER_NOT_FOUND"
                    message: "No user found with that email"
                    timestamp: "2024-01-15T10:30:00.000Z"
                    requestId: "550e8400-e29b-41d4-a716-446655440000"

  /auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: Request password reset
      description: Send email to reset password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordPayload'
      responses:
        '200':
          description: Reset email sent
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: null
              examples:
                forgot_success:
                  summary: Email sent
                  value:
                    success: true
                    data: null
                    status: 200
                    code: "SUCCESS"
                    message: "We have sent you a link to reset your password"
                    timestamp: "2024-01-15T10:30:00.000Z"
                    requestId: "550e8400-e29b-41d4-a716-446655440000"

  /auth/reset-password/{token}:
    post:
      tags:
        - Authentication
      summary: Reset password
      description: Change password using reset token
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordPayload'
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: null
              examples:
                reset_success:
                  summary: Password reset
                  value:
                    success: true
                    data: null
                    status: 200
                    code: "SUCCESS"
                    message: "Password reset successfully"
                    timestamp: "2024-01-15T10:30:00.000Z"
                    requestId: "550e8400-e29b-41d4-a716-446655440000"

  /auth/refresh-token:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Get new access token using refresh token
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          accessToken:
                            type: string
                          refreshToken:
                            type: string
              examples:
                refresh_success:
                  summary: Token refreshed
                  value:
                    success: true
                    data:
                      accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      refreshToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    status: 200
                    code: "SUCCESS"
                    message: "Token refreshed successfully"
                    timestamp: "2024-01-15T10:30:00.000Z"
                    requestId: "550e8400-e29b-41d4-a716-446655440000"

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout
      description: Invalidate session tokens
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: null
              examples:
                logout_success:
                  summary: Logout successful
                  value:
                    success: true
                    data: null
                    status: 200
                    code: "SUCCESS"
                    message: "Session closed successfully"
                    timestamp: "2024-01-15T10:30:00.000Z"
                    requestId: "550e8400-e29b-41d4-a716-446655440000"

  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user information
      description: Get authenticated user data
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
              examples:
                me_success:
                  summary: User retrieved
                  value:
                    success: true
                    data:
                      id: "user_123456"
                      email: "user@example.com"
                      username: "user123"
                      role: "user"
                      createdAt: "2024-01-15T10:30:00.000Z"
                      updatedAt: "2024-01-15T10:30:00.000Z"
                    status: 200
                    code: "SUCCESS"
                    message: "User retrieved successfully"
                    timestamp: "2024-01-15T10:30:00.000Z"
                    requestId: "550e8400-e29b-41d4-a716-446655440000"
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
              examples:
                unauthorized:
                  summary: Unauthorized
                  value:
                    success: false
                    data: null
                    status: 401
                    code: "AUTH_TOKEN_INVALID"
                    message: "Invalid access token"
                    timestamp: "2024-01-15T10:30:00.000Z"
                    requestId: "550e8400-e29b-41d4-a716-446655440000"

  # ===== USER MANAGEMENT =====
  /users:
    get:
      tags:
        - Users
      summary: Get user list
      description: Get users with pagination
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          example: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          example: 10
      responses:
        '200':
          description: User list
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
                      meta:
                        type: object
                        properties:
                          pagination:
                            type: object
                            properties:
                              page:
                                type: integer
                              limit:
                                type: integer
                              total:
                                type: integer
                              totalPages:
                                type: integer
                              hasNext:
                                type: boolean
                              hasPrev:
                                type: boolean
              examples:
                users_list:
                  summary: User list
                  value:
                    success: true
                    data:
                      - id: "user_123456"
                        email: "user1@example.com"
                        username: "user1"
                        role: "user"
                        createdAt: "2024-01-15T10:30:00.000Z"
                        updatedAt: "2024-01-15T10:30:00.000Z"
                      - id: "user_789012"
                        email: "user2@example.com"
                        username: "user2"
                        role: "admin"
                        createdAt: "2024-01-14T10:30:00.000Z"
                        updatedAt: "2024-01-14T10:30:00.000Z"
                    status: 200
                    code: "SUCCESS"
                    message: "Users retrieved successfully"
                    timestamp: "2024-01-15T10:30:00.000Z"
                    requestId: "550e8400-e29b-41d4-a716-446655440000"
                    meta:
                      pagination:
                        page: 1
                        limit: 10
                        total: 25
                        totalPages: 3
                        hasNext: true
                        hasPrev: false

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Get specific user information
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "user_123456"
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
              examples:
                user_not_found:
                  summary: User not found
                  value:
                    success: false
                    data: null
                    status: 404
                    code: "RESOURCE_NOT_FOUND"
                    message: "The requested user does not exist"
                    timestamp: "2024-01-15T10:30:00.000Z"
                    requestId: "550e8400-e29b-41d4-a716-446655440000"

    put:
      tags:
        - Users
      summary: Update user
      description: Update user information
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                username:
                  type: string
                role:
                  type: string
                  enum: [user, admin]
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'

    delete:
      tags:
        - Users
      summary: Delete user
      description: Delete a user from the system
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: null
              examples:
                delete_success:
                  summary: User deleted
                  value:
                    success: true
                    data: null
                    status: 200
                    code: "SUCCESS"
                    message: "User deleted successfully"
                    timestamp: "2024-01-15T10:30:00.000Z"
                    requestId: "550e8400-e29b-41d4-a716-446655440000"

# ===== SECURITY =====
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login endpoint

# ===== ERROR CODES =====
# Available error codes:
# AUTH_INVALID_CREDENTIALS, AUTH_USER_ALREADY_EXISTS, AUTH_USER_ALREADY_VERIFIED
# AUTH_NO_ACTIVE_SESSION, AUTH_TOKEN_EXPIRED, AUTH_TOKEN_INVALID
# AUTH_TOKEN_ALREADY_USED, AUTH_TOKEN_REVOKED, AUTH_TOKEN_MALICIOUS
# AUTH_TOKEN_OTHER_FLOW, AUTH_FORBIDDEN, AUTH_UPDATE_FAILED
# VALIDATION_ERROR, RESOURCE_NOT_FOUND
# ERR_NETWORK, ERR_CANCELED, ECONNABORTED, ETIMEDOUT, UNKNOWN_ERROR
# AUTH_RATE_LIMIT, SERVICE_UNAVAILABLE
# AUTH_USER_NOT_FOUND, AUTH_USER_BLOCKED
