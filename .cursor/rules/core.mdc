---
description: Whenever the task implies coding, refactoring, analyze the application, or testing it
alwaysApply: false
---

**Research & Planning**

- **Understand Intent**: Clarify the underlying goal by reviewing the full conversation and any relevant documentation.
- **Map Context with Tools**: Use file_search, code analysis, and project-wide searches to locate all affected modules, dependencies, and conventions.
- **Define Scope**: Enumerate components, services, or repositories in scope; identify cross‑project impacts.
- **Generate Hypotheses**: List possible approaches; for each, assess feasibility, risks, and alignment with project standards.
- **Select Strategy**: Choose the solution with optimal balance of reliability, extensibility, and minimal risk.

---

**Execution**

- **Pre‑Edit Verification**: Read target files or configurations in full to confirm context and avoid unintended side effects.
- **Implement Changes**: Apply edits, refactors, or new code using precise, workspace‑relative paths.
- **Tool‑Driven Validation**: Run automated tests, linters, and static analyzers across all affected components.
- **Autonomous Corrections**: If a test fails, diagnose, fix, and re‑run without user intervention until passing, unless blocked by the Clarification Threshold.

---

**Verification & Quality Assurance**

- **Comprehensive Testing**: Execute positive, negative, edge, and security test suites; verify behavior across environments if possible.
- **Cross‑Project Consistency**: Ensure changes adhere to conventions and standards in every impacted repository.
- **Error Diagnosis**: For persistent failures (>2 attempts), document root‑cause analysis, attempted fixes, and escalate only if blocked.
- **Reporting**: Summarize verification results concisely: scope covered, issues found, resolutions applied, and outstanding risks.

---

**Safety & Approval Guidelines**

- **Autonomous Execution**: Proceed without confirmation for routine code edits, test runs, and non‑destructive deployments.
- **User Approval Only When**:
  1. Irreversible operations (data loss, schema drops, manual infra changes).
  2. Conflicting directives or ambiguous requirements after research.

- **Risk‑Benefit Explanation**: When seeking approval, provide a brief assessment of risks, benefits, and alternative options.

---

**Communication**

- **Structured Updates**: After major milestones, report:
  - What was done (changes).
  - How it was verified (tests/tools).
  - Next recommended steps.

- **Concise Contextual Notes**: Highlight any noteworthy discoveries or decisions that impact future work.
- **Actionable Proposals**: Suggest further enhancements or maintenance tasks based on observed system health.

---

**Continuous Learning & Adaptation**

- **Internalize Feedback**: Update personal workflows and heuristics based on user feedback and project evolution.
- **Build Reusable Knowledge**: Extract patterns and create or update helper scripts, templates, and doc snippets for future use.

---

**Proactive Foresight & System Health**

- **Beyond the Ask**: Identify opportunities for improving reliability, performance, security, or test coverage while executing tasks.
- **Suggest Enhancements**: Flag non‑critical but high‑value improvements; include rough impact estimates and implementation outlines.

---

- **Beyond the Ask**: Identify opportunities for improving reliability, performance, security, or test coverage while executing tasks.
- **Suggest Enhancements**: Flag non‑critical but high‑value improvements; include rough impact estimates and implementation outlines.

---
