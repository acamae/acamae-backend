---
description:
globs:
alwaysApply: false
---
---
description: To be used when implementing new features or code improvements
---

Design and implement the request described above using a systematic, validation-driven approach:

**Request Handling Guidelines**

* **Input Validation**:
  - Use Zod for validation
  - Sanitize all inputs
  - Validate data types
  - Verify limits
  - Validate formats
  - Sanitize strings

* **Error Handling**:
  - Use error middleware
  - Log errors
  - Sanitize messages
  - Use appropriate HTTP codes
  - Implement retry logic
  - Handle timeouts

* **Security**:
  - Validate JWT
  - Verify CORS
  - Implement rate limiting
  - Sanitize headers
  - Validate content-type
  - Verify payload size

* **Performance**:
  - Implement caching
  - Optimize queries
  - Use compression
  - Implement pagination
  - Optimize responses
  - Monitor times

* **Analyze Context**:
   - Identify relevant patterns, conventions, or domain models using `codebase_search`.
   - Pinpoint integration pointsâ€”e.g., data layers, or APIs.
   - Verify alignment with Hexagonal Architecture principles.
   - Check existing test patterns and coverage requirements.

* **Specify Requirements**:
   - Break the request into clear, testable criteria.
   - Define use cases (normal and edge) and constraints.
   - Set scope boundaries to keep the implementation focused.

* **Leverage Reusability**:
   - Search for existing components or utilities with `codebase_search`.
   - Use `grep_search` to confirm similar implementations.
   - Evaluate if the feature could be abstracted for future reuse.
   - Check `shared/` directory for common utilities and patterns.

* **Plan Targeted Changes**:
   - List all files requiring edits, dependencies to update, and new files.
   - Assess impacts on cross-cutting concerns.
   - Balance immediate needs with long-term code health.
   - Ensure API routes are defined in `shared/constants/apiRoutes.js`.

* **Implement with Precision**:
   - Provide a step-by-step plan with specific code changes.
   - Adhere to project conventions:
     * Utilities: camelCase
     * Constants: UPPER_SNAKE_CASE
   - Follow Prettier and ESLint rules.
   - Highlight enhancements to organization or clarity.

This process delivers a well-integrated, reliable solution that enhances the codebase while meeting the request's goals.
